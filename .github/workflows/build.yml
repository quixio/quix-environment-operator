name: Build and Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: quixanalytics/quix-environment-operator
  # Modified registry URL format to avoid "insufficient_scope: authorization failed" error
  # Using a simpler URL structure separates the registry from the repository path
  HELM_REGISTRY: oci://registry-1.docker.io
  HELM_REPO_NAME: quixanalytics/quix-environment-operator-helm

jobs:
  extract-versions:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.original_versions.outputs.APP_VERSION }}
      chart_version: ${{ steps.original_versions.outputs.CHART_VERSION }}
      pr_number: ${{ steps.pr_info.outputs.PR_NUMBER }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract original versions
        id: original_versions
        run: |
          APP_VERSION=$(grep 'appVersion:' helm/quix-environment-operator/Chart.yaml | awk '{print $2}' | tr -d '"')
          CHART_VERSION=$(grep '^version:' helm/quix-environment-operator/Chart.yaml | awk '{print $2}')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted appVersion: $APP_VERSION (for Docker) and chartVersion: $CHART_VERSION (for Helm)"
      
      - name: Get PR info
        id: pr_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "PR_NUMBER=0" >> $GITHUB_OUTPUT
          fi
          
      - name: Set development versions for non-main branch
        if: github.ref != 'refs/heads/main'
        run: |
          DEV_VERSION="0.0.${{ github.run_number }}"
          echo "Using development version: $DEV_VERSION"
          echo "APP_VERSION=$DEV_VERSION" >> $GITHUB_ENV
          echo "CHART_VERSION=$DEV_VERSION" >> $GITHUB_ENV
          echo "APP_VERSION=$DEV_VERSION" >> $GITHUB_OUTPUT
          echo "CHART_VERSION=$DEV_VERSION" >> $GITHUB_OUTPUT
          
          # Update Chart.yaml with development versions
          sed -i "s/^version:.*/version: $DEV_VERSION/" helm/quix-environment-operator/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"$DEV_VERSION\"/" helm/quix-environment-operator/Chart.yaml
          
          # Show modified Chart.yaml for verification
          echo "Modified Chart.yaml:"
          cat helm/quix-environment-operator/Chart.yaml
          echo "Updated to use development version $DEV_VERSION for both appVersion and chartVersion"

  build-test-push-docker:
    needs: extract-versions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Display Docker image version
        run: |
          echo "Building Docker image with appVersion: ${{ needs.extract-versions.outputs.app_version }}"
          echo "Docker image will be tagged as: ${REGISTRY}/${IMAGE_NAME}:${{ needs.extract-versions.outputs.app_version }}"

      - name: Build Docker image
        run: |
          # Use appVersion for Docker image
          export IMG="${REGISTRY}/${IMAGE_NAME}:${{ needs.extract-versions.outputs.app_version }}"
          make docker-build
          echo "Docker image built successfully with tag: $IMG"
      
      - name: Run tests in Docker
        run: |
          make docker-test
          echo "All tests passed successfully"
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          # Push with appVersion tag
          export IMG="${REGISTRY}/${IMAGE_NAME}:${{ needs.extract-versions.outputs.app_version }}"
          make docker-push
          echo "Pushed Docker image with appVersion tag: $IMG"
          
          # For main branch, also tag as latest
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Pushing latest tag for Docker image"
            docker tag ${IMG} ${REGISTRY}/${IMAGE_NAME}:latest
            docker push ${REGISTRY}/${IMAGE_NAME}:latest
            echo "Pushed Docker image with latest tag"
          fi
          
          echo "Docker image pushed successfully"

  build-and-push-helm:
    needs: extract-versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure Helm and package chart
        run: |
          echo "Enabling experimental OCI support for Helm"
          export HELM_EXPERIMENTAL_OCI=1
          echo "HELM_EXPERIMENTAL_OCI=1" >> $GITHUB_ENV
          
          # Package the Helm chart
          mkdir -p ./dist
          cd helm
          helm package quix-environment-operator -d ../dist
          cd ..
          echo "Packaged Helm chart successfully"
          CHART_FILE=$(find ./dist -name "quix-environment-operator-${{ needs.extract-versions.outputs.chart_version }}.tgz")
          echo "Found chart at: ${CHART_FILE}"
          echo "CHART_FILE=${CHART_FILE}" >> $GITHUB_ENV

      - name: Create repo if it doesn't exist
        run: |
          # Create an empty OCI Helm chart repository
          mkdir -p empty-chart
          cd empty-chart
          helm create temp-chart
          helm package temp-chart
          cd ..
          
          # Try to push this chart first as initialization
          echo "Initializing repository with empty chart"
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | helm registry login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin registry-1.docker.io
          if helm push empty-chart/temp-chart-0.1.0.tgz ${HELM_REGISTRY}/${HELM_REPO_NAME}; then
            echo "Repository initialized via Helm"
          else 
            echo "Repository initialization failed, but continuing with main chart push"
          fi

      - name: Log in to Docker Hub OCI registry (for Helm)
        run: |
          # Refreshing login credentials
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | helm registry login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin registry-1.docker.io
          echo "Login succeeded"

      - name: Push Helm chart to OCI registry
        run: |
          echo "Pushing Helm chart with chartVersion: ${{ needs.extract-versions.outputs.chart_version }}"
          
          # Use verbose logging to help troubleshoot
          helm version
          echo "Using chart file: ${CHART_FILE}"
          ls -la ${CHART_FILE}
          
          # Set debug mode for more information
          export HELM_DEBUG=1
          
          # Push to the repository (without force flag as it's not supported)
          helm push ${CHART_FILE} ${HELM_REGISTRY}/${HELM_REPO_NAME}
          
          echo "Helm chart pushed successfully"
          echo "To pull this chart use:"
          echo "helm pull oci://registry-1.docker.io/${HELM_REPO_NAME} --version ${{ needs.extract-versions.outputs.chart_version }}"
