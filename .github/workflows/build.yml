name: Build and Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: quixanalytics/quix-environment-operator
  HELM_REGISTRY: oci://registry-1.docker.io/quixanalytics

jobs:
  extract-versions:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.original_versions.outputs.APP_VERSION }}
      chart_version: ${{ steps.original_versions.outputs.CHART_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract original versions
        id: original_versions
        run: |
          APP_VERSION=$(grep 'appVersion:' helm/quix-environment-operator/Chart.yaml | awk '{print $2}' | tr -d '"')
          CHART_VERSION=$(grep '^version:' helm/quix-environment-operator/Chart.yaml | awk '{print $2}')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT
          
      - name: Set development versions for non-main branch
        if: github.ref != 'refs/heads/main'
        run: |
          DEV_VERSION="0.0.${{ github.run_number }}"
          echo "Using development version: $DEV_VERSION"
          echo "APP_VERSION=$DEV_VERSION" >> $GITHUB_ENV
          echo "CHART_VERSION=$DEV_VERSION" >> $GITHUB_ENV
          
          # Update Chart.yaml with development versions
          sed -i "s/^version:.*/version: $DEV_VERSION/" helm/quix-environment-operator/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"$DEV_VERSION\"/" helm/quix-environment-operator/Chart.yaml
          
          # Show modified Chart.yaml for verification
          echo "Modified Chart.yaml:"
          cat helm/quix-environment-operator/Chart.yaml

  build-docker:
    needs: extract-versions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          export IMG="${REGISTRY}/${IMAGE_NAME}:${{ needs.extract-versions.outputs.app_version }}"
          make docker-build
          echo "Docker image built successfully"

  build-helm:
    needs: extract-versions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Package and lint Helm chart
        run: |
          make helm-lint
          make helm-package
          echo "Helm chart packaged successfully"

  push-docker:
    needs: [extract-versions, build-docker]
    # if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          export IMG="${REGISTRY}/${IMAGE_NAME}:${{ needs.extract-versions.outputs.app_version }}"
          make docker-push
          
          # Add and push latest tag for main branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ${IMG} ${REGISTRY}/${IMAGE_NAME}:latest
            docker push ${REGISTRY}/${IMAGE_NAME}:latest
          fi
          echo "Docker image pushed successfully"

  push-helm:
    needs: [extract-versions, build-helm]
    # if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Push Helm chart to OCI registry
        run: |
          # Login to Docker Hub OCI registry - using a file to avoid pipe issues
          echo "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" > auth.txt
          cat auth.txt | base64 > auth_base64.txt
          
          # Create Helm registry config manually
          mkdir -p ~/.config/helm
          echo '{"auths":{"registry-1.docker.io":{"auth":"'$(cat auth_base64.txt)'"}}}' > ~/.config/helm/registry.json
          
          # Show where files are located
          echo "Listing available Helm charts:"
          find . -name "*.tgz"
          echo  "debug auth"
          cat auth_base64.txt
          # Push chart - fix the path from deploy/ to helm/
          helm push ./helm/quix-environment-operator-${{ needs.extract-versions.outputs.chart_version }}.tgz ${{ env.HELM_REGISTRY }}
          
          # Clean up
          rm auth.txt auth_base64.txt
          
          echo "Helm chart pushed successfully" 